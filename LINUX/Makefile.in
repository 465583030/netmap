# To build external modules, you must have a prebuilt kernel available
# that contains the configuration and header files used in the build.
# go in the kernel directory and do a
#       make oldconfig; make scripts; make prepare
# or    make defconfig; make scripts; make prepare
#


ifneq ($(KERNELRELEASE),)
# kbuild part of Makefile

# list of objects for this module
#
# objects whose source file is in ../sys/dev/netmap
# the source is not here so we need to specify a dependency

remoteobjs := netmap.o netmap_mem2.o \
	netmap_generic.o netmap_mbq.o netmap_vale.o \
	netmap_offloadings.o netmap_pipe.o \
	netmap_monitor.o

define remote_template
$$(obj)/$(1): $$(M)/../sys/dev/netmap/$(1:.o=.c)
	$$(call cmd,cc_o_c)
	$$(call cmd,modversions)
endef
$(foreach o,$(remoteobjs),$(eval $(call remote_template,$(o))))

# all objects
netmap_lin-objs := $(remoteobjs) netmap_linux.o

obj-$(CONFIG_NETMAP) = netmap_lin.o

obj-$(CONFIG_V1000) += vhost-port/

obj-m += $(O_DRIVERS)
else
# normal Makefile

# The following commands are needed to build the modules as out-of-tree,
# in fact the kernel sources path must be specified.

PWD ?= $(CURDIR)
M:=$(PWD)

# Additional compile flags (e.g. header location)
EXTRA_CFLAGS := -I$(M) -I$(M)/../sys -I$(M)/../sys/dev -DCONFIG_NETMAP
EXTRA_CFLAGS += -Wno-unused-but-set-variable

all: build

# We use KSRC for the kernel configuration and sources.
# If the sources are elsewhere, then use SRC to point to them.
KSRC = @KSRC@
SRC  = @SRC@
KOPTS = @KOPTS@
LIN_VER = @LIN_VER@
MOD_LIST := @MOD_LIST@
PATCHES = @PATCHES@
S_DRIVERS = @S_DRIVERS@
GET_DRIVERS = $(S_DRIVERS:%=get-%)
include drivers.mak
endif

# actual drivers after copy and patch
DRIVERS = $(shell [ -n "$(S_DRIVERS)" ] && ls -dAp $(S_DRIVERS) 2> /dev/null)

# Compile v1000 (vhost porting to e1000) only if
# the LIN_VER >= 3.8.0, because we don't want to deal
# with backporting problems for v1000.
ifeq ($(word 1, $(sort 30800 $(LIN_VER))), 30800)
CONFIG_V1000:=m
else
CONFIG_V1000:=n
endif



build: $(GET_DRIVERS)
	$(MAKE) -C $(KSRC) M=$(PWD) CONFIG_NETMAP=m $(MOD_LIST) \
		EXTRA_CFLAGS='$(EXTRA_CFLAGS)'			\
		O_DRIVERS="$(DRIVERS:%.c=%.o)" \
		$(KOPTS) \
		modules
	@ls -l `find . -name \*.ko`

install:
	$(MAKE) -C $(KSRC) M=$(PWD) CONFIG_NETMAP=m $(MOD_LIST) \
		O_DRIVERS="$(DRIVERS:%.c=%.o)" \
		$(KOPTS) \
		modules_install

test:
	@echo "version $(LIN_VER)"
	@echo "patches $(PATCHES)"
	@echo "drivers $(DRIVERS)"

clean: clean-drivers
	-@ $(MAKE) -C $(KSRC) M=$(PWD) clean 2> /dev/null
	-@ rm -f *.orig *.rej *.ko *.o .*.d 		\
		.tmp_versions *.mod.c modules.order	\
		Module.symvers .*.cmd



test3:
	@echo "from $(PATCHES) -- to $(MYDRIVERS)"
	@echo "Drivers is $(DRIVERS)"
	@echo "Actually have `ls -d $(DRIVERS) 2> /dev/null`"

# compute the diffs for the original files
diffs:
	@for i in `find . -name \*.orig`; do 	\
		diff -urp $$i $${i%.orig} ;	\
	done

APPS_CC=@APPS_CC@
APPS_LD=@APPS_LD@
PREFIX=@PREFIX@

apps:
	$(MAKE) -C ../examples CC="$(APPS_CC)" LD="$(APPS_LD)"

install-apps:
	$(MAKE) -C ../examples install DESTDIR="$(abspath $(DESTDIR))" PREFIX="$(PREFIX)"

+%:
	@echo $($*)

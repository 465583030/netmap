#!/bin/bash

DRIVER_SRCS=$(make +DRIVER_SRCS)

function driver-path()
{
	cat driver-paths/$1/$2 2>/dev/null && return
	mkdir -p driver-paths/$1
	(
		cd $GITDIR
		git checkout netmap-$1 >/dev/null 2>&1
		git clean -fdx >/dev/null 2>&1
		find drivers/net -name $2
	) | tee driver-paths/$1/$2

}

function get-patch()
{
	local v1=$(scripts/vers $1 -c)
	local v2=$(scripts/vers $1 -i -c)
	local drvname=$(basename $2)
	local patchname=diff--$drvname--$v1--$v2
	local out=tmp-patches/$patchname
	[ -s $out ] && { echo $out; return; }
	local drvpath=$(driver-path $1 $drvname)
	[ -n "$drvpath" ] || return
	local drvdir=$(dirname $drvpath)
	(
		cd $GITDIR
		git diff --relative=$drvdir v$1..netmap-$1 -- $drvpath
	) > $out
	[ -s $out ] || { rm $out; return 1; }
	echo $out
	return 0;
}

function get-all-patches()
{
	local driver
	for driver in $DRIVER_SRCS; do
		get-patch $1 $driver
	done
}

function get-range()
{
	local v=$1
	while scripts/vers -b $v $2 -L; do
		get-all-patches $v
		v=$(scripts/vers $v -i)
	done
}

function extend()
{
	local patch=$(realpath $1)
	local v=$2
	local drv=$(scripts/vers $1 -s -p -p)
	local tmpdir1=$(mktemp -d)
	local tmpdir2=$(mktemp -d)
	local src=$(driver-path $v $drv)
	(
		cd $GITDIR
		git checkout v$v >/dev/null 2>&1
		cp -r $src $tmpdir1
		cp -r $src $tmpdir2
	)
	(
		cd $tmpdir1
		patch --no-backup-if-mismatch -p1 < $patch >/dev/null 2>&1
	) || return 1
	local patch2=$(get-patch $v $drv)
	patch2=$(realpath $patch2)
	(
		cd $tmpdir2
		patch -p1 < $patch2 >/dev/null 2>&1
	)
	diff -bBr $tmpdir1 $tmpdir2 || return 1
	scripts/vers $1 -s -p $v -i -c -S4
	#rm -rf $tmpdir1 $tmpdir2
	return 0
} 

mkdir -p tmp-patches

[ -n "$1" ] && {
	cmd=$1
	shift
	$cmd "$@"
}

#!/bin/sh
# build or run a picobsd instance
PLATFORM=amd64

#--- qemu options
QEMU_DIR=/usr/ports-luigi/qemu-netmap/work-head/qemu-1.2.2/x86_64-softmmu/

# location of the linux version
QEMU_DIR=/home/luigi/qemu-misc/qemu/x86_64-softmmu/
BHYVE_DIR=/home/luigi/qemu-misc/bhyve/

# location of the freebsd version ?
# QEMU_DIR=/usr/home/luigi/qemu-misc/qemu-head/x86_64-softmmu/

[ "$QEMU_PORT" = ""  ] && QEMU_PORT=4444	# monitoring port
NET1=" -device e1000,netdev=base  -netdev user,id=base"
QEMU_OPTS="-m 1024 -smp 2 "


arch=
while [ x"$1" != x ] ; do
    case "$1" in
    -app)
	APP=$2
	shift
	;;

    -j)
	PARALLEL="-j 4"
	;;

    -targ*|-arch*)
	arch="--arch $2"
	PLATFORM=$2
	shift
	;;

    -kern*)
	KERNCONF=$2
	shift
	;;

    -nomod*)
	export NO_MODULES=yes
	;;

    -clean)
	unset NO_CLEAN
	;;

    -depend)
	unset NO_KERNELDEPEND
	;;

    ### qemu flags
    -nonet)
	# NET1=" -net nic,model=e1000-paravirt -net netmap,ifname=valeQE1"
	NET1=" $NET1 -device e1000-paravirt"
	;;
    -vale)
	# NET1=" -net nic,model=e1000-paravirt -net netmap,ifname=valeQE1"
	NET1=" $NET1 -device e1000-paravirt,netdev=n  -netdev netmap,id=n,ifname=valeQE1"
	;;
    -npipe)
	# NET1=" -net nic,model=e1000-paravirt -net netmap,ifname=valeQE1"
	NET1=" $NET1 -device e1000-paravirt,netdev=n  -netdev netmap,id=n,ifname=valeXX:QE1{01"
	;;

    -vale2)
	# NET1=" -net nic,model=e1000-paravirt -net netmap,ifname=valeQE1"
	NET1=" $NET1 -device e1000,netdev=n  -netdev netmap,id=n,ifname=valeQE2"
	QEMU_PORT=4445
	;;
    -npipe)
	# NET1=" -net nic,model=e1000-paravirt -net netmap,ifname=valeQE1"
	NET1=" $NET1 -device e1000,netdev=n  -netdev netmap,id=n,ifname=vale:xx{1"
	QEMU_PORT=4446
	;;
    -sdl)
	VIDEO=" "
	;;

    -vnc)
	VIDEO="-vnc :0"
	;;

    -hd*)
	hda=$2
	shift
	;;

    -q11) # qemu 11
	QEMU_DIR=/usr/ports/emulators/qemu/work/qemu-0.11.1/x86_64-softmmu/
	;;


    *)
	break
	;;

    esac
    shift
done
# cmd image root

[ "$VIDEO" = "" ] && VIDEO="-curses -monitor tcp::$QEMU_PORT,server,nowait"

QEMU_OPTS="$QEMU_OPTS $NET1 $NET2"

cmd=$1
pico=$2
root=$3
{ shift; shift; shift ; } || echo "ignoring errors"

QEMU=${QEMU_DIR}qemu-system-x86_64
[ -f "$hda" ] || hda=build_dir-$pico-$PLATFORM/picobsd.bin
echo "--- $cmd $pico on tree $root"
case "$cmd" in
   init)
	../$root/release/picobsd/build/picobsd --src ../$root -n -v \
		$arch --init ${PARALLEL}
	;;
   build|bld)
	../$root/release/picobsd/build/picobsd --src ../$root -n -v $pico
		#$arch $pico
	;;
   run)
	$QEMU $QEMU_OPTS $VIDEO -hda $hda $*
	;;

   bhyve)
	# COM2="-l com2,/dev/nmdm1A"
	echo sudo bhyveload -m 512 -d $hda vm1
	#	-h /tmp/diskless
	sudo bhyveload -m 512 -d $hda vm1
	sudo ifconfig tap0 up
	sudo ${BHYVE_DIR}bhyve -c 1 -s 0,hostbridge \
		-s 2,virtio-net,vale0 \
		-s 3,virtio-net,null \
		-s 4,virtio-net,tap0,mac=00:a0:98:fa:cc:10 \
		-s 30,lpc -l com1,/dev/nmdm0A $COM2 \
		-s 10,ahci-hd,$hda -A -H -P -m 512 vm1 
	sudo bhyvectl --destroy --vm=vm1
	;;

    diskless) # on bhyve
	sudo bhyveload -m 512 -h /tmp/diskless vm1
	sudo ifconfig tap0 up
	sudo ${BHYVE_DIR}bhyve -c 1 -s 0,hostbridge \
		-s 1,virtio-net,tap0,mac=00:a0:98:fa:cc:10 \
		-s 2,virtio-net,vale0 \
		-s 3,virtio-net,null \
		-s 30,lpc -l com1,/dev/nmdm0A $COM2 \
		-A -H -P -m 512 vm1
	sudo bhyvectl --destroy --vm=vm1
	;;
esac

